package com.fitin.shopping.service;

import com.fitin.shopping.dto.ProductDto;
import com.fitin.shopping.dto.ProductImgDto;
import com.fitin.shopping.entity.Product;
import com.fitin.shopping.entity.ProductImg;
import com.fitin.shopping.exception.ProductNotFoundException;
import com.fitin.shopping.repository.ProductImgRepository;
import com.fitin.shopping.repository.ProductRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
public class ProductService {

    private final ProductRepository productRepository;
    private final ProductImgService productImgService;
    private final ProductImgRepository productImgRepository;

    // 상품 목록 조회 (페이징 처리)
    @Transactional(readOnly = true)
    public Page<ProductDto> getAllProducts(Pageable pageable) {
        Page<Product> products = productRepository.findAll(pageable);
        return products.map(ProductDto::new);  // 엔티티 -> DTO 변환
    }

    // 상품 상세 조회
    @Transactional(readOnly = true)
    public ProductDto getProductById(Long productId) {
        Product product = productRepository.findById(productId)
                                           .orElseThrow(() -> new ProductNotFoundException("상품을 찾을 수 없습니다."));
                                           
        // 상품 이미지 정보 가져오기
        List<ProductImg> productImgs = productImgRepository.findByProductId(productId);
        List<ProductImgDto> productImgDtos = new ArrayList<>();
        for (ProductImg productImg : productImgs) {
            productImgDtos.add(new ProductImgDto(productImg)); // 이미지 엔티티 -> DTO 변환
        }

        // 상품 정보와 이미지 정보 설정
        ProductDto productDto = new ProductDto(product);
        productDto.setProductImgDtos(productImgDtos);

        return productDto;
    }

    // 상품 추가
    @Transactional
    public ProductDto addProduct(ProductDto productDto, List<MultipartFile> productImgFileList) throws Exception {
        // 상품 저장
        Product product = new Product(productDto);
        productRepository.save(product);

        // 이미지 저장 로직
        for (int i = 0; i < productImgFileList.size(); i++) {
            ProductImg productImg = new ProductImg();
            productImg.setProduct(product);

            if (i == 0)
                productImg.setRepImgYn("Y"); // 첫 번째 이미지를 대표 이미지로 설정
            else
                productImg.setRepImgYn("N");

            productImgService.saveProductImg(productImg, productImgFileList.get(i));
        }

        return new ProductDto(product);
    }

    // 상품 수정
    @Transactional
    public ProductDto updateProduct(Long productId, ProductDto productDto, List<MultipartFile> productImgFileList) throws Exception {
        // 기존 상품 찾기
        Product product = productRepository.findById(productId)
                                           .orElseThrow(() -> new ProductNotFoundException("상품을 찾을 수 없습니다."));

        // 상품 정보 수정
        product.updateProduct(productDto);
        
        // 기존 이미지 정보 수정
        List<Long> productImgIds = productDto.getProductImgIds();
        for (int i = 0; i < productImgFileList.size(); i++) {
            productImgService.updateProductImg(productImgIds.get(i), productImgFileList.get(i));
        }

        return new ProductDto(product);
    }

    // 상품 삭제
    @Transactional
    public void deleteProduct(Long productId) {
        if (!productRepository.existsById(productId)) {
            throw new ProductNotFoundException("상품을 찾을 수 없습니다.");
        }
        productRepository.deleteById(productId);
    }

    // 관리자 페이지에서 상품 목록 조회 (페이징 처리)
    @Transactional(readOnly = true)
    public Page<ProductDto> getAdminProductPage(Pageable pageable) {
        Page<Product> products = productRepository.findAll(pageable);
        return products.map(ProductDto::new);  // 엔티티 -> DTO 변환
    }
    
    // 메인 페이지에 보여줄 상품 목록 조회 (페이징 처리)
    @Transactional(readOnly = true)
    public Page<ProductDto> getMainProductPage(Pageable pageable) {
        Page<Product> products = productRepository.findAll(pageable);
        return products.map(ProductDto::new);  // 엔티티 -> DTO 변환
    }
}
