package com.fitin.shopping.service;

import com.fitin.shopping.dto.OrderCreateDto;
import com.fitin.shopping.dto.OrderHistoryDto;
import com.fitin.shopping.dto.OrderItemDto;
import com.fitin.shopping.dto.OrderResponseDto;
import com.fitin.shopping.entity.Order;
import com.fitin.shopping.entity.OrderItem;
import com.fitin.shopping.exception.OrderNotFoundException;
import com.fitin.shopping.repository.OrderItemRepository;
import com.fitin.shopping.repository.OrderRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class OrderService {

    private final OrderRepository orderRepository;
    private final OrderItemRepository orderItemRepository;

    // 주문 생성
    @Transactional
    public OrderResponseDto createOrder(OrderCreateDto orderCreateDto) {
        // Order Entity로 변환
        Order order = new Order();
        order.setStatus("NEW"); // 새로운 주문 상태로 설정

        // OrderItem 추가
        for (OrderItemDto orderItemDto : orderCreateDto.getOrderItems()) {
            OrderItem orderItem = new OrderItem(order, orderItemDto.getProductId(), orderItemDto.getQuantity());
            order.addOrderItem(orderItem);
        }

        // 주문 저장
        orderRepository.save(order);

        // OrderResponseDto로 변환 및 반환
        return new OrderResponseDto(order);
    }

    // 주문 내역 조회
    @Transactional(readOnly = true)
    public List<OrderHistoryDto> getOrderHistory(Long userId) {
        List<Order> orders = orderRepository.findOrdersByUserId(userId);
        return orders.stream()
                .map(order -> new OrderHistoryDto(order))
                .collect(Collectors.toList());
    }

    // 주문 취소
    @Transactional
    public void cancelOrder(Long orderId) {
    	Order order = orderRepository.findById(orderId)
    		    .orElseThrow(() -> new OrderNotFoundException("주문을 찾을 수 없습니다."));

        
        if (!order.getStatus().equals("NEW")) {
            throw new IllegalStateException("이미 처리된 주문은 취소할 수 없습니다.");
        }

        order.setStatus("CANCELLED");
        orderRepository.save(order);
    }
}
