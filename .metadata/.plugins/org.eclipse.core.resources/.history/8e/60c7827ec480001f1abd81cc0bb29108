package com.fitin.shopping.service;

import com.fitin.shopping.dto.ProductCreateDto;
import com.fitin.shopping.dto.ProductDto;
import com.fitin.shopping.dto.ProductImgDto;
import com.fitin.shopping.dto.ProductUpdateDto;
import com.fitin.shopping.entity.Product;
import com.fitin.shopping.entity.ProductImg;
import com.fitin.shopping.exception.ProductNotFoundException;
import com.fitin.shopping.repository.ProductImgRepository;
import com.fitin.shopping.repository.ProductRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class ProductService {

    private final ProductRepository productRepository;
    private final ProductImgRepository productImgRepository;

    // 상품 목록 조회
    @Transactional(readOnly = true)
    public List<ProductDto> getAllProducts() {
        List<Product> products = productRepository.findAll();
        return products.stream()
                .map(product -> new ProductDto(product))
                .collect(Collectors.toList());
    }

    // 상품 상세 조회
    @Transactional(readOnly = true)
    public ProductDto getProductById(Long productId) {
        Product product = productRepository.findById(productId)
                .orElseThrow(() -> new ProductNotFoundException("상품을 찾을 수 없습니다."));
        
        // 관련 이미지 목록 가져오기
        List<ProductImg> productImgs = productImgRepository.findByProductId(productId);
        List<ProductImgDto> imgDtos = productImgs.stream()
                .map(ProductImgDto::new)
                .collect(Collectors.toList());

        return new ProductDto(product, imgDtos);
    }

    // 상품 추가
    @Transactional
    public ProductDto createProduct(ProductCreateDto productCreateDto) {
        Product product = new Product(productCreateDto); // DTO -> 엔티티 변환
        productRepository.save(product);

        return new ProductDto(product);
    }

    // 상품 수정
    @Transactional
    public ProductDto updateProduct(Long productId, ProductUpdateDto productUpdateDto) {
        Product product = productRepository.findById(productId)
                .orElseThrow(() -> new ProductNotFoundException("상품을 찾을 수 없습니다."));

        product.updateProduct(productUpdateDto); // DTO -> 엔티티 변환
        productRepository.save(product);
        return new ProductDto(product);
    }

    // 상품 삭제
    @Transactional
    public void deleteProduct(Long productId) {
        if (!productRepository.existsById(productId)) {
            throw new ProductNotFoundException("상품을 찾을 수 없습니다.");
        }
        productRepository.deleteById(productId);
    }
}
