package com.fitin.shopping.service;

import com.fitin.shopping.dto.CartDetailDto;
import com.fitin.shopping.dto.CartItemDto;
import com.fitin.shopping.entity.Cart;
import com.fitin.shopping.entity.CartItem;
import com.fitin.shopping.repository.CartItemRepository;
import com.fitin.shopping.repository.CartRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class CartService {

    private final CartRepository cartRepository;
    private final CartItemRepository cartItemRepository;

    @Transactional
    public void addItemToCart(CartItemDto cartItemDto) {
        CartItem cartItem = new CartItem(cartItemDto); // DTO -> Entity 변환
        cartItemRepository.save(cartItem);
    }

    @Transactional(readOnly = true)
    public List<CartDetailDto> getCartItems(Long cartId) {
        return cartItemRepository.findCartDetailDtoList(cartId)
                .stream()
                .map(cartItem -> new CartDetailDto(cartItem)) // Entity -> DTO 변환
                .collect(Collectors.toList());
    }

    @Transactional
    public void removeItemFromCart(Long cartItemId) {
        cartItemRepository.deleteById(cartItemId);
    }

    @Transactional
    public void updateCartItem(Long cartItemId, CartItemDto cartItemDto) {
        CartItem cartItem = cartItemRepository.findById(cartItemId)
                .orElseThrow(() -> new RuntimeException("Cart item not found"));
        cartItem.update(cartItemDto); // Entity 업데이트
        cartItemRepository.save(cartItem);
    }
}
